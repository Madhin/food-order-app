{"ast":null,"code":"import React, { createContext, useReducer } from 'react';\nexport const CartContext = /*#__PURE__*/createContext({});\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // const cartReducer = (state, action) => {\n//   if (action.type === 'ADD') {\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n//     const existingCartItem = state.items[existingCartItemIndex];\n//     let updatedItems;\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     } else {\n//       updatedItems = state.items.concat(action.item);\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === 'REMOVE') {\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingCartItemIndex];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter(item => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount\n//     };\n//   }\n//   return defaultCartState;\n// };\n// const CartProvider = (props) => {\n//   const [cartState, dispatchCartAction] = useReducer(\n//     cartReducer,\n//     defaultCartState\n//   );\n//   const addItemToCartHandler = (item) => {\n//     dispatchCartAction({ type: 'ADD', item: item });\n//   };\n//   const removeItemFromCartHandler = (id) => {\n//     dispatchCartAction({ type: 'REMOVE', id: id });\n//   };\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n// export default CartProvider;","map":{"version":3,"sources":["C:/Users/madhi/Desktop/nology/food-order-app/src/store/CartProvider.jsx"],"names":["React","createContext","useReducer","CartContext","defaultCartState","items","totalAmount"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,WAAW,gBAAIF,aAAa,CAAC,EAAD,CAAlC;AAEP,MAAMG,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB,C,CAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, {createContext, useReducer} from 'react'\r\n\r\nexport const CartContext =  createContext({});\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0\r\n};\r\n\r\n\r\n\r\n// const cartReducer = (state, action) => {\r\n//   if (action.type === 'ADD') {\r\n//     const updatedTotalAmount =\r\n//       state.totalAmount + action.item.price * action.item.amount;\r\n\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.item.id\r\n//     );\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n//     let updatedItems;\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + action.item.amount,\r\n//       };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     } else {\r\n//       updatedItems = state.items.concat(action.item);\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n//   if (action.type === 'REMOVE') {\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.id\r\n//     );\r\n//     const existingItem = state.items[existingCartItemIndex];\r\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n//     let updatedItems;\r\n//     if (existingItem.amount === 1) {\r\n//       updatedItems = state.items.filter(item => item.id !== action.id);\r\n//     } else {\r\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount\r\n//     };\r\n//   }\r\n\r\n//   return defaultCartState;\r\n// };\r\n\r\n// const CartProvider = (props) => {\r\n//   const [cartState, dispatchCartAction] = useReducer(\r\n//     cartReducer,\r\n//     defaultCartState\r\n//   );\r\n\r\n//   const addItemToCartHandler = (item) => {\r\n//     dispatchCartAction({ type: 'ADD', item: item });\r\n//   };\r\n\r\n//   const removeItemFromCartHandler = (id) => {\r\n//     dispatchCartAction({ type: 'REMOVE', id: id });\r\n//   };\r\n\r\n//   const cartContext = {\r\n//     items: cartState.items,\r\n//     totalAmount: cartState.totalAmount,\r\n//     addItem: addItemToCartHandler,\r\n//     removeItem: removeItemFromCartHandler,\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider value={cartContext}>\r\n//       {props.children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default CartProvider;"]},"metadata":{},"sourceType":"module"}